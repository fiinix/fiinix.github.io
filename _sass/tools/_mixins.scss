/* ==========================================================================


   Mixins


   ========================================================================== */



/**
 *
 * Media-query
 *
 */
@mixin mq($point, $IE9: false, $query1: min, $query2: width) {
	@if $IE9 == true{
		.lt-ie9 & {
			@content;
		}
		@media screen and (#{$query1}-#{$query2}: em($point)) {
			@content;
		}
	}
	@else {
		@media screen and (#{$query1}-#{$query2}: em($point)) {
			@content;
		}
	}
}
/**
 *
 * Transition
 *
 */
@mixin transition(
	$property: $transition-property-default,
	$duration: $transition-duration-default,
	$timing: $transition-timing-default,
	$delay: $transition-delay-default) {
	transition: $property $duration $timing $delay;
}
/**
 *
 * Elements state
 *
 */



/**
 *
 * Get mapped values
 *
 */
@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  
  @return true;
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
 
  @return $map;
}

@function z($layers...) {
  @if not map-has-nested-keys($z-layers, $layers...) {
    @warn "No layer found for `#{inspect($layers...)}` in $z-layers map. Property omitted.";
  }
 
  @return map-deep-get($z-layers, $layers...);
}



/*------------------------------------*\
    #Take a svg and make it embeddable in the css (without Base64)
\*------------------------------------*/

// Helper function
// Return null rather than throwing an error if index is outside list range.
@function nth-or-null($list, $index) {
    @return if(length($list) >= $index, nth($list, $index), null);
}

//
//  Function to replace characters in a string
//
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace);
    }
    @return $string;
}

//
//  Function to create an optimized svg url
//  (may need a few extra replacements)
//
@function old_svg-url($svg) {
    $svg: str-replace($svg, '"', '\'');
    $svg: str-replace($svg, '<', '%3C');
    $svg: str-replace($svg, '>', '%3E');
    $svg: str-replace($svg, '&', '%26');
    $svg: str-replace($svg, '#', '%23');
    @return url("data:image/svg+xml;charset=utf8,#{$svg}");
}

@function svg-url($svg) {
    //
    // Chunk up string in order to avoid
    // "SystemStackError: stack level too deep"
    //
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
